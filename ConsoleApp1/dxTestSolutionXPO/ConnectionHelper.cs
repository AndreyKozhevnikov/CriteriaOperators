//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using DevExpress.Xpo;
using DevExpress.Data.Filtering;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration;
using dxTestSolutionXPO.Module.BusinessObjects;
using DevExpress.Xpo.DB;

namespace dxTestSolutionXPO {
    public static class ConnectionHelper {
        static Type[] persistentTypes = new Type[] {
            typeof(Contact),typeof(MyTask)
        };
        public static Type[] GetPersistentTypes() {
            Type[] copy = new Type[persistentTypes.Length];
            Array.Copy(persistentTypes, copy, persistentTypes.Length);
            return copy;
        }
        static string ConnectionString;
        static bool UseInMemoryStore;
        public static void Connect(DevExpress.Xpo.DB.AutoCreateOption autoCreateOption, bool threadSafe = false) {
            ConnectionString = ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString;
            if(threadSafe) {
                var provider = XpoDefault.GetConnectionProvider(ConnectionString, autoCreateOption);
                var dictionary = new DevExpress.Xpo.Metadata.ReflectionDictionary();
                dictionary.GetDataStoreSchema(persistentTypes);
                XpoDefault.DataLayer = new ThreadSafeDataLayer(dictionary, provider);
            } else {
                XpoDefault.DataLayer = XpoDefault.GetDataLayer(ConnectionString, autoCreateOption);
            }
            UseInMemoryStore = true;
            if(UseInMemoryStore) {
                XpoDefault.DataLayer = new SimpleDataLayer(new InMemoryDataStore());
            }
            XpoDefault.Session = null;
        }
        public static DevExpress.Xpo.DB.IDataStore GetConnectionProvider(DevExpress.Xpo.DB.AutoCreateOption autoCreateOption) {
            return XpoDefault.GetConnectionProvider(ConnectionString, autoCreateOption);
        }
        public static DevExpress.Xpo.DB.IDataStore GetConnectionProvider(DevExpress.Xpo.DB.AutoCreateOption autoCreateOption, out IDisposable[] objectsToDisposeOnDisconnect) {
            return XpoDefault.GetConnectionProvider(ConnectionString, autoCreateOption, out objectsToDisposeOnDisconnect);
        }
        public static IDataLayer GetDataLayer(DevExpress.Xpo.DB.AutoCreateOption autoCreateOption) {
            return XpoDefault.GetDataLayer(ConnectionString, autoCreateOption);
        }
        public static Contact AddContact(UnitOfWork _uow, string _firstName) {
            var c = new Contact(_uow);
            c.FirstName = _firstName;
            return c;
        }

        internal static Contact AddContact(UnitOfWork _uow, string _firstName, int _age) {
            var c = AddContact(_uow, _firstName);
            c.Age = _age;
            return c;
            
        }
        public static Contact AddContact(UnitOfWork _uow, string _firstName, int _age, bool _isActive) {
            var c = AddContact(_uow, _firstName, _age);
            c.IsActive = _isActive;
            return c;
        }
        public static object AddTask(UnitOfWork _uow, Contact _parent, string _subject, int _price) {
            var t = new MyTask(_uow);
            t.Subject = _subject;
            t.Price = _price;
            t.AssignedTo = _parent;
            return t;
        }
    }

}
